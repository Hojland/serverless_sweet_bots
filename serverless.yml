# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-sweet-bots
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerizePip: true

provider:
  name: aws
  runtime: python3.8
  stackName: sweet-slack
  profile: nuuday_ai_dev
  region: eu-central-1

# you can add statements to the Lambda function's IAM Role here
iamRoleStatements:
  - Effect: "Allow"
    Action:
      - "secretsmanager:GetSecretValue"
    Resource: arn:aws:secretsmanager:eu-central-1:059692690036:secret:slack_api_token-NCHDcr

#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**
functions:
  insult:
    handler    : app.insult
    description: Make an insult in slack
    #environment:
    #  BOT_NAME        : ${self:custom.botName}
    #  CDN_DISTRIBUTION: ${self:custom.distributionId}
    #  VERIFICATION_TOKEN: ${ssm:slack_verification_token}
    #  BOT_TOKEN         : ${ssm:slack_api_token}
    exclude: 
      - package-lock.json
    optimize: true
    # Create the API gateway
    events:
      - http:
          path: "/insult"
          method: post
  hate:
    handler    : app.hate
    description: Make a hate comment in slack
    exclude: 
      - package-lock.json
    optimize: true
    # Create the API gateway
    events:
      - http:
          path: "/hate"
          method: post
  praise:
    handler    : app.praise
    description: Make a praise comment in slack
    exclude: 
      - package-lock.json
    optimize: true
    # Create the API gateway
    events:
      - http:
          path: "/praise"
          method: post
  compliment:
    handler    : app.compliment
    description: Make a compliment in slack
    exclude: 
      - package-lock.json
    optimize: true
    # Create the API gateway
    events:
      - http:
          path: "/compliment"
          method: post
  cowsay:
    handler    : app.cowsay
    description: Write a random cowsay
    exclude: 
      - package-lock.json
    optimize: true
    # Create the API gateway
    events:
      - http:
          path: "/cowsay"
          method: post
  
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
